name: Build, Package, and Release

on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Increment version
      id: increment
      run: |
        if [ -f version.ini ]; then
          version=$(grep -oP '^\d+\.\d+\.\d+' version.ini)
        else
          version="1.0.0"
        fi
        IFS='.' read -r -a parts <<< "$version"
        parts[2]=$((parts[2] + 1))
        new_version="${parts[0]}.${parts[1]}.${parts[2]}"
        date=$(date +'%Y-%m-%d')
        echo "$new_version ($date)" > version.ini
        echo "::set-output name=new_version::$new_version"
        echo "::set-output name=date::$date"
        echo "New version: $new_version"
        echo "Date: $date"
        echo "Version file content:"
        cat version.ini

    - name: Commit version file
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add version.ini
        git commit -m 'Increment version to ${{ steps.increment.outputs.new_version }} on ${{ steps.increment.outputs.date }}'
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/streesobrs/Updater.git HEAD:master

    - name: Set up .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Update version in .csproj
      run: |
        sed -i 's/<Version>.*<\/Version>/<Version>${{ steps.increment.outputs.new_version }}<\/Version>/' Updater/Updater.csproj

    - name: Verify version update
      run: cat Updater/Updater.csproj

    - name: Restore dependencies again
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish --configuration Release --no-build --output ./publish

    - name: Create update.zip
      run: |
        cd publish
        zip -r ../update.zip .

    - name: Verify update.zip
      run: ls -l update.zip

    - name: Generate update_info.json
      run: |
        echo '{
          "version": "${{ steps.increment.outputs.new_version }}",
          "updateUrl": "https://github.com/streesobrs/Updater/releases/download/v${{ steps.increment.outputs.new_version }}/update.zip"
        }' > update_info.json

    - name: Verify update_info.json
      run: cat update_info.json

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.increment.outputs.new_version }}
        release_name: Release v${{ steps.increment.outputs.new_version }}
        draft: false
        prerelease: false

    - name: Upload update.zip to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./update.zip
        asset_name: update.zip
        asset_content_type: application/zip

    - name: Upload update_info.json to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./update_info.json
        asset_name: update_info.json
        asset_content_type: application/json
